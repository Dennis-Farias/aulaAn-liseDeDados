# Carregar o pacote 'fpp2'
library(fpp2)
# Carregar a série temporal 'elecequip'
data(elecequip)
# Decompor a série temporal
decomposed_elecequip <- decompose(elecequip)
# Visualizar a decomposição
plot(decomposed_elecequip)
library(fpp2)
autoplot(elecequip, main="Produção mensal de Equipamentos Elétricos nos EUA", ylab="Produção", xlab="Tempo")
autoplot(elecequip, main="Produção mensal de Equipamentos Elétricos nos EUA", ylab="Produção", xlab="Tempo")
serie_decomposta = decompose(elecequip, 'multiplicative')
plot(serie_decomposta)
# Carregando o pacote 'forecast'
library(forecast)
# Modelo Holt-Winters com sazonalidade multiplicativa
modelo_hw <- hw(elecequip, seasonal="multiplicative")
# Fazendo previsões para os próximos 2 períodos sazonais completos
previsoes <- forecast(modelo_hw, h=2*frequency(elecequip))
previsoes
autoplot(previsoes)
serie_decomposta = decompose(elecequip, 'multiplicative')
plot(serie_decomposta)
# Fazendo previsões para os próximos 2 períodos sazonais completos
previsoes <- forecast(modelo_hw, h=2)
previsoes
autoplot(previsoes)
# Fazendo previsões para os próximos 2 períodos sazonais completos
previsoes <- forecast(modelo_hw, h=2*frequency(elecequip))
previsoes
autoplot(previsoes)
# Ajustando o modelo Holt-Winters com otimização automática dos parâmetros usando ETS
modelo_ets <- ets(elecequip, model="AAA")
# Fazer previsões a um passo à frente
previsoes_1passo <- fitted(modelo_ets)
previsoes_1passo
previsoes2 <- forecast(modelo_ets, h=2*frequency(elecequip))
# Plotar as previsões
plot(previsoes2)
# Plotar as previsões
autoplot(previsoes2)
# Plotar as previsões
autoplot(previsoes2)
autoplot(previsoes)
# Plotar as previsões
autoplot(previsoes2)
previsoes2
mse <- mean((elecequip - previsoes_1passo)^2)
mape <- mean(abs((elecequip - previsoes_1passo)/elecequip)) * 100
mae <- mean(abs(elecequip - previsoes_1passo))
print(paste("Erro Quadrático Médio (MSE):", mse))
print(paste("Erro Absoluto Percentual Médio (MAPE):", mape))
print(paste("Erro Absoluto Médio (MAE):", mae))
mse <- mean((elecequip - previsoes_1passo)^2)
mape <- mean(abs((elecequip - previsoes_1passo)/elecequip)) * 100
mae <- mean(abs(elecequip - previsoes_1passo))
print(paste("Erro Quadrático Médio (MSE):", mse))
print(paste("Erro Absoluto Percentual Médio (MAPE):", mape))
print(paste("Erro Absoluto Médio (MAE):", mae))
plot(residuals(modelo_ets))
residuos = residuals(modelo_ets)
# Teste de Normalidade
shapiro_test = shapiro.test(residuos)
shapiro_test
acf(shipex)
acf(bricksq, 40)
# Funções de Autocorrelação (ACF e PACF)
acf(residuos, main="Função de Autocorrelação dos Resíduos")
# Funções de Autocorrelação (ACF e PACF)
acf(residuos, main="Função de Autocorrelação dos Resíduos")
# Funções de Autocorrelação (ACF e PACF)
acf(residuos, main="Função de Autocorrelação dos Resíduos")
pacf(residuos, main="Função de Autocorrelação Parcial dos Resíduos")
# Funções de Autocorrelação (ACF e PACF)
acf(residuos, main="Função de Autocorrelação dos Resíduos")
pacf(residuos, main="Função de Autocorrelação Parcial dos Resíduos")
# Funções de Autocorrelação (ACF e PACF)
acf(residuos, main="Função de Autocorrelação dos Resíduos")
pacf(residuos, main="Função de Autocorrelação Parcial dos Resíduos")
# Funções de Autocorrelação (ACF e PACF)
acf(residuos, main="Função de Autocorrelação dos Resíduos")
pacf(residuos, main="Função de Autocorrelação Parcial dos Resíduos")
plot(residuos, main="Resíduos do Modelo", ylab="Resíduos", xlab="Tempo")
abline(h=0, col="red")
plot(residuos, main="Resíduos do Modelo", ylab="Resíduos", xlab="Tempo")
plot(residuos, main="Resíduos do Modelo", ylab="Resíduos", xlab="Tempo")
abline(h=0, col="red")
plot(residuos, main="Resíduos do Modelo", ylab="Resíduos", xlab="Tempo")
abline(h=0, col="red")
plot(residuos, main="Resíduos do Modelo", ylab="Resíduos", xlab="Tempo")
abline(h=0, col="red")
plot(residuos, main="Resíduos do Modelo", ylab="Resíduos", xlab="Tempo")
# Plotar o histograma dos resíduos
hist(residuos, breaks=20, main="Histograma dos Resíduos", xlab="Resíduos", col="blue")
# Plotar o histograma dos resíduos
hist(residuos, breaks=20, main="Histograma dos Resíduos", xlab="Resíduos", col="blue")
qqnorm(residuos)
qqline(residuos, col="red")
qqnorm(residuos)
qqline(residuos, col="red")
# Resíduos
plot(residuos, main="Resíduos do Modelo", ylab="Resíduos", xlab="Tempo")
# Histograma dos resíduos
hist(residuos, breaks=20, main="Histograma dos Resíduos", xlab="Resíduos", col="blue")
# Funções de Autocorrelação (ACF e PACF)
acf(residuos, main="Função de Autocorrelação dos Resíduos")
# Funções de Autocorrelação (ACF e PACF)
acf(residuos, main="Função de Autocorrelação dos Resíduos")
pacf(residuos, main="Função de Autocorrelação Parcial dos Resíduos")
# Resíduos
plot(residuos, main="Resíduos do Modelo", ylab="Resíduos", xlab="Tempo")
# Histograma dos resíduos
hist(residuos, breaks=20, main="Histograma dos Resíduos", xlab="Resíduos", col="blue")
qqnorm(residuos)
qqline(residuos, col="red")
# Funções de Autocorrelação (ACF e PACF)
acf(residuos, main="Função de Autocorrelação dos Resíduos")
pacf(residuos, main="Função de Autocorrelação Parcial dos Resíduos")
ljung_box_test <- Box.test(residuos, lag=20, type="Ljung-Box")
ljung_box_test
# Funções de Autocorrelação (ACF e PACF)
acf(residuos, main="Função de Autocorrelação dos Resíduos")
pacf(residuos, main="Função de Autocorrelação Parcial dos Resíduos")
library(fpp2)
data(elecequip)
autoplot(elecequip, main="Produção mensal de Equipamentos Elétricos nos EUA", ylab="Produção", xlab="Tempo")
serie_decomposta = decompose(elecequip, 'multiplicative')
plot(serie_decomposta)
# Carregando o pacote 'forecast'
library(forecast)
# Modelo Holt-Winters com sazonalidade multiplicativa
modelo_hw <- hw(elecequip, seasonal="multiplicative")
# Fazendo previsões para os próximos 2 períodos sazonais completos
previsoes <- forecast(modelo_hw, h=2*frequency(elecequip))
previsoes
autoplot(previsoes)
autoplot(previsoes)
autoplot(elecequip, main="Produção mensal de Equipamentos Elétricos nos EUA", ylab="Produção", xlab="Tempo")
autoplot(elecequip, main="Produção mensal de Equipamentos Elétricos nos EUA", ylab="Produção", xlab="Tempo")
serie_decomposta = decompose(elecequip, 'multiplicative')
plot(serie_decomposta)
serie_decomposta = decompose(elecequip, 'multiplicative')
plot(serie_decomposta)
autoplot(elecequip, main="Produção mensal de Equipamentos Elétricos nos EUA", ylab="Produção", xlab="Tempo")
serie_decomposta = decompose(elecequip, 'multiplicative')
plot(serie_decomposta)
# Carregando o pacote 'forecast'
library(forecast)
# Modelo Holt-Winters com sazonalidade multiplicativa
modelo_hw <- hw(elecequip, seasonal="multiplicative")
# Fazendo previsões para os próximos 2 períodos sazonais completos
previsoes <- forecast(modelo_hw, h=2*frequency(elecequip))
previsoes
autoplot(previsoes)
autoplot(previsoes)
# Ajustando o modelo Holt-Winters com otimização automática dos parâmetros usando ETS
modelo_ets <- ets(elecequip, model="AAA")
# Fazendo previsões para os próximos 2 anos (2 períodos sazonais completos)
previsoes2 <- forecast(modelo_ets, h=2*frequency(elecequip))
previsoes2
autoplot(previsoes2)
autoplot(previsoes2)
mse <- mean((elecequip - previsoes_1passo)^2)
mape <- mean(abs((elecequip - previsoes_1passo)/elecequip)) * 100
mae <- mean(abs(elecequip - previsoes_1passo))
print(paste("Erro Quadrático Médio (MSE):", mse))
print(paste("Erro Absoluto Percentual Médio (MAPE):", mape))
print(paste("Erro Absoluto Médio (MAE):", mae))
# Resíduos
residuos = residuals(modelo_ets)
# Teste de Normalidade
shapiro_test = shapiro.test(residuos)
shapiro_test
# Teste de Normalidade
shapiro_test = shapiro.test(residuos)
shapiro_test
# Funções de Autocorrelação (ACF e PACF)
acf(residuos, main="Função de Autocorrelação dos Resíduos")
pacf(residuos, main="Função de Autocorrelação Parcial dos Resíduos")
pacf(residuos, main="Função de Autocorrelação Parcial dos Resíduos")
# Resíduos
plot(residuos, main="Resíduos do Modelo", ylab="Resíduos", xlab="Tempo")
# Resíduos
plot(residuos, main="Resíduos do Modelo", ylab="Resíduos", xlab="Tempo")
# Histograma dos resíduos
hist(residuos, breaks=20, main="Histograma dos Resíduos", xlab="Resíduos", col="blue")
qqnorm(residuos)
qqline(residuos, col="red")
