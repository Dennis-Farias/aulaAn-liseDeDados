## Exercício 1.9 a)
# Média
# H0: x = 14
# H1: x > 14
# Se H0 for verdade -> ET -> t9
# Devemos rejeitar H0 se ET > t9
# p-valor = 0.04 < 0.05, logo rejeitar H0
# Há evidência estatística para afirmar que o prazo médio de pagamento é mais de 14 dias
dados1.9 = c(34,3,4,44,29,17,32,14,28,16)
t.test(dados1.9, mu=14, alt='g', conf.level = 0.95)
t.test(dados1.9, mu=14, alt='t', conf.level = 0.95)
## Exercício 1.9 a)
# Média
# H0: x = 14
# H1: x != 14
# ET =
# Se H0 for verdade -> ET -> t9
# Devemos rejeitar H0 se ET > t9
# p-valor = 0.04 < 0.05, logo rejeitar H0
# Há evidência estatística para afirmar que o prazo médio de pagamento é mais de 14 dias
dados1.9 = c(34,3,4,44,29,17,32,14,28,16)
t.test(dados1.9, mu=14, alt='t', conf.level = 0.95)
## Exercício 1.6
# a)
# Valor esperado
# H0: x = 12
# H1: x < 12
# ET = (x - u) / (s/[n) =
# VP = P(t9 > ET) =
dados1.6 = c(12,12.4,11.5,12.1,11.7,11.6,11.9,12.2,11.7,11.8)
t.test(dados1.6, mu=12, alt='l')
m = matrix(c(12,8,7,3,9,10,7,4,2,9,8,11),
nrow = 3,
ncol = 4, byrow = T)
m
View(m)
# 2º passo: código R
chisq.test(m)
# 2º passo: código R
chisq.test(m)
## Exercício 2.1
m2 = matrix(c(64, 37, 38, 25, 29, 26, 50, 21, 36, 55, 26, 27, 12, 17, 18, 19),
nrow = 4,
ncol = 4, byrow = T)
m2
# Teste de indepedência do qui-quadrado
chisq.test(m2)
m3 = matrix(c(28,42,30,24,44,78,78,76),
nrow = 2,
ncol = 4, byrow = T)
m3
# Teste de independência do qui-quadrado
chisq.test(m3)
# Teste de independência do qui-quadrado
chisq.test(m2)
m2 = matrix(c(64, 37, 38, 25, 29, 26, 50, 21, 36, 55, 26, 27, 12, 17, 18, 19),
nrow = 4,
ncol = 4, byrow = T)
colnames(m2) = c('Verm', 'Verdes', 'Azuis', 'Outros')
rownames(m2) = c('A Tola', 'A Joga', 'Record', 'Outros')
m2
# Teste de independência do qui-quadrado
chisq.test(m3)
m3 = matrix(c(28,42,30,24,44,78,78,76),
nrow = 2,
ncol = 4, byrow = T)
colnames(m3) = c('BAIXO', 'MÉDIO', 'ALTO', 'MUITO ALTO')
rownames(m3) = c('Norte', 'Sul')
m3
x = c(6.93, 6,76, 5.94, 7.70, 5.61, 6.32, 7.08, 5.30, 5.86, 6.04, 7.13, 6.76)
y = c(12.1, 12.4, 13.0, 11.9, 14.2, 13.6, 12.7, 14.2, 13.7, 13.3, 12.8, 13.4)
plot(x,y, pch=20)
x = c(12.1, 12.4, 13, 11.9, 14.2, 13.6, 12.7, 14.2, 13.7, 3.3, 12.8, 13.4)
y = c(6.93, 6.76, 5.94, 7.7, 5.61, 6.32, 7.08, 5.3, 5.86, 6.04, 7.13, 6.76)
plot(x,y, pch=20) # Diagrama de dispersão
x = c(6.93, 6.76, 5.94, 7.7, 5.61, 6.32, 7.08, 5.3, 5.86, 6.04, 7.13, 6.76)
y = c(12.1, 12.4, 13, 11.9, 14.2, 13.6, 12.7, 14.2, 13.7, 3.3, 12.8, 13.4)
plot(x,y, pch=20) # Diagrama de dispersão
cor(x, y)
x = c(6.93, 6.76, 5.94, 7.7, 5.61, 6.32, 7.08, 5.3, 5.86, 6.04, 7.13, 6.76)
y = c(12.1, 12.4, 13, 11.9, 14.2, 13.6, 12.7, 14.2, 13.7, 13.3, 12.8, 13.4)
plot(x,y, pch=20) # Diagrama de dispersão
cor(x, y)
cor.test(x, y, alternative = 'l', method = 'spearman',
exact = FALSE, continuity = TRUE)
ks.test(x, 'pnorm', 10, 1, alternative = 't')
ks.test(x, 'pnorm', 10, 1, alternative = 't')
x = c(11.9, 10.6, 13.3, 11.6, 12.9, 10.4, 11.3, 13.5, 9.1, 8.2,
11.6, 10.0, 11.3, 10.3, 8.4, 9.9, 11.0, 10.3, 13.2, 9.9)
ks.test(x, 'pnorm', 10, 1, alternative = 't')
ks.t
## Exercício 2.4
x = c(130, 150, 150, 150, 140, 140, 160, 140, 140, 150, 160)
ks.test(x, 'pnorm', 147, sqrt(90), alternative = 't')
x = c(11.9, 10.6, 13.3, 11.6, 12.9, 10.4, 11.3, 13.5, 9.1, 8.2,
11.6, 10.0, 11.3, 10.3, 8.4, 9.9, 11.0, 10.3, 13.2, 9.9)
ks.test(x, 'pnorm', 10, 1, alternative = 't')
x = c(130, 150, 150, 150, 140, 140, 160, 140, 140, 150, 160)
ks.test(x, 'pnorm', 147, sqrt(90), alternative = 't')
ks.test(x, 'pexp', lambda = lambda_estimado)
x = c(2326, 694, 1524, 1955, 490, 208, 1839, 641,
1181, 2375, 2839, 141, 2181, 3375, 363, 944)
lambda_estimado = 1/mean(x)
ks.test(x, 'pexp', lambda = lambda_estimado)
ks.test(x, y  = 'pexp', lambda = lambda_estimado)
mean(x) # Estimativa para Beta = 1442.25
ks.test(x, y = 'pexp', rate = 1/1442.25, alternative = 't')
# 2º passo: código R
chisq.test(m)
# Teste de independência do qui-quadrado
chisq.test(m2)
# Teste de independência do qui-quadrado
chisq.test(m3)
# 2º passo: código R
chisq.test(m)
# Teste de independência do qui-quadrado
chisq.test(m2)
# Teste de independência do qui-quadrado
chisq.test(m3)
cor.test(x, y, alternative = 'l', method = 'spearman',
exact = FALSE, continuity = TRUE)
## Exercício 2.9
x = c(6.93, 6.76, 5.94, 7.7, 5.61, 6.32, 7.08, 5.3, 5.86, 6.04, 7.13, 6.76)
y = c(12.1, 12.4, 13, 11.9, 14.2, 13.6, 12.7, 14.2, 13.7, 13.3, 12.8, 13.4)
plot(x,y, pch=20) # Diagrama de dispersão
cor(x, y) # coef. correlação amostral
cor.test(x, y, alternative = 'l', method = 'spearman',
exact = FALSE, continuity = TRUE)
cor.test(x, y, alternative = 'l', method = 'spearman',
exact = FALSE, continuity = TRUE)
## b)
acf(dole,40)
acf(cowtemp, 40)
beer %>% ses(PI=F) %>% autoplot
library(fpp2)
library(Mcomp)
library(expsmooth)
library(fma)
library(forecast)
library(ggplot2)
library(graphics)
beer %>% ses(PI=F) %>% autoplot
## b)
acf(dole,40)
acf(cowtemp, 40)
acf(lynx, 40)
acf(USAccDeaths, 40)
acf(bricksq, 40)
shipex
autoplot(shipex)
plot(u)
plot(shipex)
acf(shipex)
MM_3 = ma(shipex, 3, centre = FALSE)
MM_5 = ma(shipex, 5, centre = FALSE)
MM_7 = ma(shipex, 7, centre = FALSE)
MM_3x3 = ma(MM_3, 3, centre = TRUE) # Média móvel centrada 3x3
MM_5x5 = ma(MM_5, 5, centre = TRUE) # Média móvel centrada 5x5
print(cbind(MM_3, MM_5, MM_7, MM_3x3, MM_5x5))
# Exercício 5.7
y = ts(c(99, 88, 93, 111, 120, 108, 111, 130, 139, 127, 131, 152, 160, 148, 150, 170))
MM_4 = ma(y, 4, centre = FALSE)
MM_2x4 = ma(MM_4, 2, centre = TRUE)
MM_2x4
autoplot(z)
autoplot(y)
# Exercício 5.7
y = c(99, 88, 93, 111, 120, 108, 111, 130, 139, 127, 131, 152, 160, 148, 150, 170)
y = ts(y, frequency = 4)
autoplot(y)
# Exercício 5.7
y = c(99, 88, 93, 111, 120, 108, 111, 130, 139, 127, 131, 152, 160, 148, 150, 170)
y = ts(y, frequency = 4)
autoplot(y)
# Exercício 5.7
y = c(99, 88, 93, 111, 120, 108, 111, 130, 139, 127, 131, 152, 160, 148, 150, 170)
z = ts(y, frequency = 4)
autoplot(z)
# Exercício 5.7
y = c(99, 120, 139, 160, 88, 108, 127, 148, 93, 111, 131, 150, 111, 130, 152, 170)
z = ts(y, frequency = 4)
autoplot(z)
autoplot(z)
MM_4 = ma(y, 4, centre = FALSE)
MM_2x4 = ma(MM_4, 2, centre = TRUE)
MM_2x4
MM_4 = ma(y, 4, centre = FALSE)
MM_4
MM_4x2 = ma(MM_4, 2, centre = TRUE)
MM_2x4
MM_4x2 = ma(MM_4, 2, centre = TRUE)
MM_4x2
library(graphics)
autoplot(y, series='Dados') +
autolayer(ma(y,4), series = '4-MA') +
xlab('Year') + ylab('') +
ggtitle('Exercício 3.7') +
scale_colour_manual(values=c('Data'='grey50', '4-MA'='red'),
breaks = c('Data', '4-MA'))
library(graphics)
autoplot(y, series='Dados') +
autolayer(ma(y,4), series = '4-MA') +
xlab('Year') + ylab('') +
ggtitle('Exercício 3.7') +
scale_colour_manual(values=c('Data'='grey50', '4-MA'='red'),
breaks = c('Data', '4-MA'))
autoplot(z, series='Dados') +
autolayer(ma(y,4), series = '4-MA') +
xlab('Year') + ylab('') +
ggtitle('Exercício 3.7') +
scale_colour_manual(values=c('Data'='grey50', '4-MA'='red'),
breaks = c('Data', '4-MA'))
autoplot(y, series='Dados') +
autolayer(ma(y,4), series = '4-MA') +
xlab('Year') + ylab('') +
ggtitle('Exercício 3.7') +
scale_colour_manual(values=c('Data'='grey50', '4-MA'='red'),
breaks = c('Data', '4-MA'))
autoplot(y, series='Dados') +
autolayer(ma(y,4), series = '4-MA') +
xlab('Year') + ylab('') +
ggtitle('Exercício 3.7') +
scale_colour_manual(values=c('Data'='grey50', '4-MA'='red'),
breaks = c('Data', '4-MA'))
autoplot(z, series='Dados') +
autolayer(ma(y,4), series = '4-MA') +
xlab('Year') + ylab('') +
ggtitle('Exercício 3.7') +
scale_colour_manual(values=c('Data'='grey50', '4-MA'='red'),
breaks = c('Data', '4-MA'))
autoplot(z, series='Dados') +
autolayer(ma(z,4), series = '4-MA') +
xlab('Year') + ylab('') +
ggtitle('Exercício 3.7') +
scale_colour_manual(values=c('Data'='grey50', '4-MA'='red'),
breaks = c('Data', '4-MA'))
decomp.adit = decompose(y, 'additive')
decomp.adit = decompose(z, 'additive')
decomp.adit
plot(decomp.adit)
summary(decomp.adit)
## b)
acf(dole,40)
library(fpp2)
library(Mcomp)
library(expsmooth)
library(fma)
library(forecast)
library(ggplot2)
library(graphics)
## b)
acf(dole,40)
plastics
autoplot(plastics)
dados = ts(plastics, frequency = 12)
autoplot(dados)
dados = ts(plastics, frequency = 12)
autoplot(dados)
dados = ts(plastics, frequency = 5)
autoplot(dados)
dados = plastics
autoplot(dados)
autoplot(dados)
AESimples_12 = ses(eknives, h=1, 0.1)
AESimples_12
AESimples_12 = ses(eknives, h=1, alpha=0.1)
AESimples_12
summary(AESimples_12)
AESimples_12 = ses(eknives, h=1)
AESimples_12
AESimples_12 = ses(eknives, h=2)
AESimples_12
AESimples_12 = ses(eknives, h=8)
AESimples_12
AESimples_12 = ses(eknives, h=1)
AESimples_12
dados =  ts(c(200,135, 195, 197.5, 310, 175, 155, 130, 220, 277.5, 235))
AESimples = ses(dados, h=1)
AESimples
AESimples = ses(dados, h=1, alpha = 0.1)
AESimples
AESimples = ses(dados, h=1, alpha = 0.2)
AESimples
AESimples = ses(dados, h=1)
summary(AESimples)
AESimples = ses(dados, h=1, alpha = 0.1)
AESimples
AESimples = ses(dados, h=1, alpha = 0.5)
AESimples
AESimples = ses(dados, h=1, alpha = 0.9)
AESimples
AESimples_0.1 = ses(dados, h=1, alpha = 0.1)
AESimples
summary(AESimples)
AESimples_0.1 = ses(dados, h=1, alpha = 0.1)
AESimples_0.1
summary(AESimples_0.1)
AESimples_0.5 = ses(dados, h=1, alpha = 0.5)
AESimples_0.5
summary(AESimples_0.5)
AESimples_0.9 = ses(dados, h=1, alpha = 0.9)
AESimples_0.9
summary(AESimples_0.9)
library(fpp2)
library(Mcomp)
library(expsmooth)
library(fma)
library(forecast)
library(ggplot2)
library(graphics)
AESimples = ses(dados, h=1, alpha = 0.1)
AESimples
AESimples = ses(dados5.13, h=1, alpha = 0.1)
AESimples
dados5.13 = ts(c(2,4,6,8,10,12,14,16,18,20))
AESimples = ses(dados5.13, h=1, alpha = 0.1)
AESimples
AESimples = ses(dados5.13, h=1)
AESimples
AESimples_13 = ses(dados5.13, h=1)
AESimples_13
autoplot(dados5.13)
AESimples_13 = ses(dados5.13, h=1)
AESimples_13
AESimples_13 = ses(dados5.13, h=1)
summary(AESimples_13)
holt_13 = holt(dados5.13, h=1)
summary(holt_13)
holt_13 = holt(dados5.13, h=10)
summary(holt_13)
1
holt_13 = holt(dados5.13, h=1)
summary(holt_13)
holt
holt_13 = holt(dados5.13, h=1)
holt_13 = holt(dados5.13, h=1)
summary(holt_13)
autoplot(AirPassengers)
AESimples_16 = ses(AirPassengers, h=2)
summary(AESimples_16)
AESimples_16 = ses(AirPassengers, h=24)
summary(AESimples_16)
dados5.16 = AirPassengers
autoplot(dados5.16)
# Amortecimento exponencial simples
AESimples_16 = ses(dados5.16, h=24)
summary(AESimples_16)
# Método de holt
holt_16 = holt(dados5.16, h=24)
summary(holt_16)
autoplot(AESimples_16)
autoplot(holt_16)
# Método de holt-winters aditivo
holt_winter_ad_16 = hw(dados5.16, seasonal = 'additive', h=24)
# Método de holt-winters aditivo
holt_winters_ad_16 = hw(dados5.16, seasonal = 'additive', h=24)
summary(holt_winters_ad_16)
autoplot(holt_winters_ad_16)
# Método de holt-winters multiplicativo
holt_winters_mul_16 = hw(dados5.16, seasonal = 'multiplicative', h=24)
summary(holt_winters_mul_16)
autoplot(holt_winters_mul_16)
autoplot(dados5.16)
# Amortecimento exponencial simples
AESimples_16 = ses(dados5.16, h=24)
summary(AESimples_16)
autoplot(AESimples_16)
# Método de holt
holt_16 = holt(dados5.16, h=24)
summary(holt_16)
autoplot(holt_16)
# Método de holt-winters aditivo
holt_winters_ad_16 = hw(dados5.16, seasonal = 'additive', h=24)
summary(holt_winters_ad_16)
autoplot(holt_winters_ad_16)
# Método de holt-winters multiplicativo
holt_winters_mul_16 = hw(dados5.16, seasonal = 'multiplicative', h=24)
summary(holt_winters_mul_16)
autoplot(holt_winters_mul_16)
# Amortecimento exponencial simples
AESimples_16 = ses(dados5.16, h=24)
summary(AESimples_16)
autoplot(AESimples_16)
summary(holt_winters_ad_16)
summary(holt_16)
autoplot(holt_16)
autoplot(holt_winters_ad_16)
autoplot(holt_winters_mul_16)
summary(dados5.16)
head(dados5.16)
dados5.16
dados5.16 = AirPassengers
# Amortecimento exponencial simples
AESimples_16 = ses(dados5.16, h=24)
library(fpp2)
library(Mcomp)
library(expsmooth)
library(fma)
library(forecast)
library(ggplot2)
library(graphics)
AESimples_16 = ses(dados5.16, h=24)
summary(AESimples_16)
autoplot(AESimples_16)
holt_winters_mul_16 = hw(dados5.16, seasonal = 'multiplicative', h=24)
summary(holt_winters_mul_16)
autoplot(holt_winters_mul_16)
holt_13 = holt(dados5.13, h=1)
summary(holt_13)
View(m2)
cowtemp %>% ses(PI=F) %>% autoplot
autoplot(cowtemp)
decomp.adit = decompose(z, 'additive')
decomp.adit
plot(dados5.16)
plot(aggregate(dados5.16))
dados3.2 = data.frame(
tratamento = c(rep('A',10), rep('B', 10), rep('C', 10)),
produtividade = c(14, 13, 20, 15, 13, 15, 19, 18, 11, 13,
13, 14, 13, 18, 15, 15, 16, 15, 16, 15,
19, 16, 17, 20, 19, 16, 18, 21, 19, 16)
)
dados3.2
modelo = aov(produtividade~tratamento, data=dados3.2)
summary(modelo)
modelo3.2 = aov(produtividade~tratamento, data=dados3.2)
summary(modelo3.2)
sum(residuals(modelo3.2))
shapiro.test(dados3.2$produtividade) # dos Dados
shapiro.test(residuals(modelo3.2)) # dos Resíduos
partlett.test(produtividade~tratamento, data=dados3.2)
library(fpp2)
library(Mcomp)
library(expsmooth)
library(fma)
library(forecast)
library(ggplot2)
library(graphics)
partlett.test(produtividade~tratamento, data=dados3.2)
partlett.test(produtividade~tratamento, data=dados3.2)
help(partlett)
install.packages(partlett)
install.packages(partlett.test)
Tuskey(modelo3.2)
TukeyHSD(modelo3.2)
partlett.test(produtividade~tratamento, data=dados3.2)
bartlett.test(produtividade~tratamento, data=dados3.2)
